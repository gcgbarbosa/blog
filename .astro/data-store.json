[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.2","content-config-digest","5423e2fd6ade69fa","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dracula\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"themes\":[\"catppuccin-mocha\",\"dark-plus\"],\"defaultProps\":{}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,23,24,33,34,44,45,55,56,64,65,75,76,85,86,97,98,108,109,118,119,128,129,139,140,150,151,160,161,170,171,180,181,190,191],"adk",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"deferredRender":22},{"title":14,"date":15,"description":16,"tags":17},"Getting started with Google ADK",["Date","2025-07-29T00:00:00.000Z"],"An optional description for SEO. If not provided, an automatically created summary will be used.",[18],"generative-ai","I was trying to get started with the [Google ADK](https://google.github.io/adk-docs/agents/llm-agents/)\nbut I felt like the documentation lacked a straight forward example to just copy and run.\n\nThis is what I tried to do here.\n\n## Create a new project and install google-adk using uv\n\n```sh\nuv init adk\ncd adk\nuv add google-adk\nuv sync\n```\n\nAnd you're good to go in terms of boilerplate.\n\n## Then add the code\n\nFirst, import the imports:\n\n```python\nimport asyncio\nimport os\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n```\n\nGood. Then you will need the Agent:\n\n```python\nos.environ[\"GOOGLE_GENAI_USE_VERTEXAI\"] = \"FALSE\"\nos.environ[\"GOOGLE_API_KEY\"] = \"PASTE_YOUR_ACTUAL_API_KEY_HERE\"\n\nagent = Agent(\n    name=\"agent name\",\n    model=\"gemini-2.0-flash\",\n    description=\"agent description\",\n    instruction=\"system prompt\",\n    output_key=\"response\",\n)\n```\n\nThen you will need the session:\n\n```python\napp_name = \"gcgbarbosa's blog\"\nsession_service = InMemorySessionService()\n\nuser_id = \"user_id\"\nsession_id = \"session_id\"\n\nsession_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id,\n)\n```\n\nThe last thing you need is the runner:\n\n```python\nrunner = Runner(\n    agent=agent,\n    app_name=app_name,\n    session_service=session_service,\n)\n```\n\nNow you can receive a message from the user or another agent and run it trough the agent that you just created:\n\n```python\nasync def run_agent(message: str):\n  content = types.Content(role=\"user\", parts=[types.Part(text=message)])\n\n  # Execute the agent and get the final response\n  final_response = \"\"\n  async for event in runner.run_async(\n      user_id=user_id,\n      session_id=session_id,\n      new_message=content,\n  ):\n      if event.is_final_response() and event.content and event.content.parts:\n          final_response = event.content.parts[0].text\n          break\n\n  return final_response\n\nresponse = asyncio.run(run_agent(\"Hello, how are you?\"))\n```\n\nThis is the simplest agent that you can create.\nIt does not even use tools (is it really an agent if it does not use tools? probably not).\n\nThe documentation shows how to use tools anyways: [ADK\nQuickstart](https://google.github.io/adk-docs/get-started/quickstart/#agentpy).\n\nGood luck!","src/posts/adk.mdx","097cb3ef097a97a7",true,"docstrings",{"id":23,"data":25,"body":30,"filePath":31,"digest":32,"deferredRender":22},{"title":26,"date":27,"tags":28},"TIL docstrings for Enums are placed below the attribute in python",["Date","2025-07-28T00:00:00.000Z"],[29],"development","In python, docstrings can be used when serializing the Pydantic/dataclasses to JSON before they\ncan be consumed by the LLM API.\n\nI did not know, but for Enums, the docstrings are placed below the attribute:\n\n```python\nfrom enum import Enum\n\nclass Status(Enum):\n    \"\"\"Represents a system status.\"\"\"\n\n    PENDING = \"pending\"\n    \"\"\"The task is waiting to be executed.\"\"\"\n\n    SUCCESS = \"success\"\n    \"\"\"The task completed successfully.\"\"\"\n\n# --- Accessing the docstrings ---\nprint(f\"Docstring for PENDING: '{Status.PENDING.__doc__}'\")\nprint(f\"Docstring for SUCCESS: '{Status.SUCCESS.__doc__}'\")\n```\n\nWill result in:\n\n```plaintext\nDocstring for PENDING: 'The task is waiting to be executed.'\nDocstring for SUCCESS: 'The task completed successfully.'\n```\n\nThat's it. Funny stuff.\n\nSource: [issue#1725](https://github.com/microsoft/python-language-server/issues/1725) of PLS.","src/posts/docstrings.mdx","60bc45c0a051098f","keyboard",{"id":33,"data":35,"body":41,"filePath":42,"digest":43,"deferredRender":22},{"title":36,"date":37,"description":38,"tags":39},"The case for custom ergonomic keyboards",["Date","2023-07-01T00:00:00.000Z"],"It is never early to start preventing repetitive strain injury",[40],"productivity","If we do our jobs right (programmers),\nwe spend 40 hours a week typing on this thing called keyboard.\nSome people love keyboards—a lot.\nI am one of them. I started with mechanical keyboards, and I must warn you that this is addictive.\n\n## Mechanical Keyboards\n\nA mechanical keyboard uses individual mechanical switches for each key instead of the membrane\ncommonly used in most modern keyboards.\nSometimes the mechanical switches provide tactile feedback and a distinct \"click\" sound when pressed.\nMechanical switches are usually more responsive and comfortable for typing.\nAll this to say mechanical keyboards provide a nicer experience.\n\n![cleaning mechanical keyboard](/posts/keyboards/example.webp)\n\n### Custom Mechanical Keyboards\n\nYou can build a mechanical keyboard from scratch yourself.\nIt typically involves selecting a custom mechanical keyboard kit or individual components,\nsuch as a printed circuit board,\nswitches, keycaps, and a case and then assembling these components into the keyboard.\n\nThere are many particularities of mechanical keyboards that I will have to skip.\nI want to avoid the \"switches war specifically\".\nI think we have way too many options.\nIf you can, test brown, red, and blue cherry MX or similar brands.\nThen go from there. Don't overthink. There are way too many options.\n\nTo me, the best example of this type of keyboard is the Planck.\nThe keyboard was designed by Jack Humbert and is manufactured and sold by the company OLKB (**Ortholinear** Keyboards).\n\n![ortholinear example](/posts/keyboards/ortho.webp)\n\n### Ortholinear vs Staggered\n\nAn ortholinear keyboard arranges the keys in a grid pattern,\nwith keys aligned in straight rows and columns,\nunlike the staggered layout found in most traditional keyboards.\nThis layout is intended to reduce finger travel distance and promote a more\nergonomic typing position by reducing strain on the fingers and wrists.\n\n### Keyboard firmware\n\nThe keyboard firmware controls how the keyboard functions and communicates with the computer or other devices.\n[ZMK](https://github.com/zmkfirmware/zmk),\n[BlueMicro](https://github.com/jpconstantineau/BlueMicro_BLE),\nand [QMK](https://github.com/qmk/qmk_firmware) are the most well-known.\n\n## Split keyboards\n\nA split keyboard is divided into two or more separate sections,\nusually separated by a gap or a pivot. The sections can be adjusted to fit the user's preferences,\nallowing for a more ergonomic typing position that reduces strain on the wrists and arms.\n\nMy \\*dreams\\* keyboard used to be the Kinesis Advantage360:\n\n![kinesis](/posts/keyboards/split.webp)\n\n### Custom Split Mechanical Keyboard (CSMK)\n\nNow the real deal.\nCustom Split Mechanical Keyboard is the holy grail of keyboards.\nIt is the ultimate repetitive strain injury fighter.\nBear with me. Your hands are going to thank you.\n\n### Examples\n\nKyria ([https://github.com/splitkb/kyria](https://github.com/splitkb/kyria)):\n\n![kyria keyboards](/posts/keyboards/kyria.webp)\n\nLili58 ([https://github.com/kata0510/Lily58](https://github.com/kata0510/Lily58)):\n\n![lili keyboard](/posts/keyboards/lili.webp)\n\nRedox ([https://github.com/mattdibi/redox-keyboard](https://github.com/mattdibi/redox-keyboard)):\n\n![redox keyboard](/posts/keyboards/redox.webp)\n\n### George's babies\n\nI have two corne keyboards([https://github.com/foostan/crkbd](https://github.com/foostan/crkbd)).\nOne wired and one wireless. I will break down how I built the wireless one,\ntrying to shed some light on what you'll need to choose to make a similar build.\n\nThis is my baby:\n\n![my keyboard 1](/posts/keyboards/baby1.webp)\n\nBottom:\n\n![my keyboard 2](/posts/keyboards/baby2.webp)\n\nThe parts are:\n\n- PCB\n  - You must get the PCB printed\n  - cheapest is always going to a printer\n  - You can get it easier from [https://keyhive.xyz/](https://keyhive.xyz/)\n    - There are other options, feel free to pick the best\n- Power button\n  - Aliexpress, Amazon\n  - [https://www.amazon.com/gp/product/B086L2GPGX/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1](https://www.amazon.com/gp/product/B086L2GPGX/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n    - this is where I got mine\n    - send me an e-mail if links break\n- Keycaps\n  - Aliexpress, Amazon\n    - [https://boardsource.xyz/store/5f6ef2d68e3bf05ab838f918](https://boardsource.xyz/store/5f6ef2d68e3bf05ab838f918) \\*\n      got mine from boardsource\n- Switches\n  - Aliexpress, Amazon\n    - got mine from boardsource\n    - I have the choc robin (close-ish to blue switches)\n    - [https://boardsource.xyz/store/5ef6f7376786dc1e65a80744](https://boardsource.xyz/store/5ef6f7376786dc1e65a80744)\n- Kailh Hot Swap Sockets\n  - same place you get the switches from\n  - get them both together\n- Microcontrollers\n  - [https://nicekeyboards.com/nice-nano](https://nicekeyboards.com/nice-nano)\n    - I use the nice nano with ZMK firmware\n    - get them from keyhive or boardsource\n- Batteries\n  - Amazon, for sure, get a 301230 lithium battery.\n  - [https://www.amazon.com/s?k=301230&crid=UP1Y3Z7Z9NSO&sprefix=301230%2Caps%2C122&ref=nb_sb_noss_1](https://www.amazon.com/s?k=301230&crid=UP1Y3Z7Z9NSO&sprefix=301230%2Caps%2C122&ref=nb_sb_noss_1)\n- Nuts and bolts (optional)\n- Reset button (optional)\n- Case (optional)\n  - My case is composed of 3 things:\n    - Plastic sheet that I cut the same format as the keyboard PCB\n      - Female 3/8 to 1/4 screw adapter\n        - [https://www.amazon.com/gp/product/B073W2C9SK/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1](https://www.amazon.com/gp/product/B073W2C9SK/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n      - Camera mount clamp with 1/4 screw\n        - [https://www.amazon.com/gp/product/B07QV1HYVZ/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1](https://www.amazon.com/gp/product/B07QV1HYVZ/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n\nOnce you get the parts, you need to put it together, solder it in place,\nflash the firmware, and learn how to use your new device.","src/posts/keyboard.mdx","c0455b3e8e9d1241","mise",{"id":44,"data":46,"body":52,"filePath":53,"digest":54,"deferredRender":22},{"title":47,"date":48,"description":49,"tags":50},"Getting Started with Mise",["Date","2025-01-13T00:00:00.000Z"],"Learn how to manage tasks, environment variables, and devtools efficiently using Mise.",[29,51],"fullstack","## What is `mise` and how to use it\n\nMise is a tool for managing tasks, environment variables, and developer tools across projects.\n\n### Install and activate `mise`\n\nTo install Mise, run the following command:\n\n```bash\ncurl https://mise.run | sh\n```\n\nNext, add Mise to your shell configuration. For `zsh`:\n\n```bash\necho 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc\n```\n\n### Using `mise`\n\n#### Install a Global Tool\n\nTo install Node.js version 22 globally:\n\n```bash\nmise use --global node@22\n```\n\n#### Check Tool Version\n\nYou can verify the installed version using:\n\n```bash\nmise exec -- node -v\n# Output: v22.x.x\n```\n\nIf Mise is activated, you can also run the command directly:\n\n```bash\nnode -v\n# Output: v22.x.x\n```\n\n### Configuration Files\n\nMise uses a configuration file to manage tools globally.\nThe global configuration file is located at `~/.config/mise/config.toml`.\nThis is an example configuration:\n\n```toml\n[tools]\nnode = \"22\"\n```\n\nMise also keeps local configuration files in the project directory (`mise.toml`).\n\n## Devtools\n\nTo use a specific tool version in a project directory, navigate to the project and run:\n\n```bash\ncd my-project\nmise use node@22\n```\n\nThis command ensures the correct version of Node.js (v22) is used within the project.\n\n## Environment Variables\n\nYou can define project-specific environment variables with Mise. For example:\n\n```bash\nmise set NODE_ENV=development\n```\n\nThis sets the `NODE_ENV` variable to `development` for the current project.\n\n## Tasks\n\nMise allows you to define tasks in a `mise.toml` file.\nHere's an example `mise.toml` file:\n\n```toml\n[tasks.build]\ndescription = \"Build the CLI\"\nrun = \"cargo build\"\n```\n\nTo run the `build` task, execute:\n\n```bash\nmise run build\n```\n\nThat's it!\n\n## Bonus\n\nEnable [just](https://github.com/casey/just)\ncompletions by adding this to your mise global file:\n\n```toml\n[hooks.enter]\nshell = \"bash\"\nscript = \"eval '$(just --completions zsh)'\"\n```","src/posts/mise.mdx","b3846ed1e1fae2ab","ollama-outside",{"id":55,"data":57,"body":61,"filePath":62,"digest":63,"deferredRender":22},{"title":58,"date":59,"description":16,"tags":60},"Accessing Ollama from other machines",["Date","2025-08-07T00:00:00.000Z"],[18],"Ollama runs on port 11434 (an allusion to llama if you did not know).\n\nIf you run it on your machine and try to access it from another machine in your network, you will realize it does not work.\nThis is because Ollama binds to `localhost` by default.\n\nIn order to fix this, you need to set the `OLLAMA_HOST` environment variable to `0.0.0.0`.\nThis tells Ollama to listen on all network interfaces.\n\nWhat you can do is edit the `sudo vi /etc/systemd/system/ollama.service` file\nand add `Environment=\"OLLAMA_HOST=0.0.0.0\"` to it.\n\nThe complete file might look like this:\n\n```plaintext title=\"ollama.service\"\n[Unit]\nDescription=Ollama Service\nAfter=network-online.target\n\n[Service]\nExecStart=/usr/local/bin/ollama serve\nUser=ollama\nGroup=ollama\nRestart=always\nRestartSec=3\nEnvironment=\"PATH=/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\"\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\n\n[Install]\nWantedBy=default.target\n```\n\nSave that file and then run:\n\n```sh\nsudo systemctl daemon-reload\nsudo systemctl restart ollama\n```\n\nVoila!","src/posts/ollama-outside.mdx","968516ece652f1f2","pre-commit",{"id":64,"data":66,"body":72,"filePath":73,"digest":74,"deferredRender":22},{"title":67,"date":68,"description":69,"tags":70},"Walk trough pre-commit and enforcing conventional commits",["Date","2024-10-14T00:00:00.000Z"],"Learn how to use pre-commit to automate code checks.",[71,40,29],"git","## Pre commit\n\nPre-commit is a framework that allows you to run automated checks.\nYou can run like code formatting and linting on your code before\nyou commit it to a Git repository.\n\n### How to add pre-commit to your project\n\nInstall pre-commit with pip:\n\n```bash\npip install pre-commit\n```\n\nGenerate a sample configuration file and save it as `.pre-commit-config.yaml`:\n\n```bash\npre-commit sample-config > .pre-commit-config.yaml\n```\n\n### How to add commit-lint to enforce conventional commits\n\nConventional commits is a specification for writing commit messages\nwith a structured format that helps automate changelog generation and semantic versioning.\n\nYour `.pre-commit-config.yaml` file should look like this:\n\n```plaintext\n❯ cat .pre-commit-config.yaml\n# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n```\n\nYou are going to add the following to the end of the file:\n\n```plaintext\n-   repo: https://github.com/compilerla/conventional-pre-commit\n    rev: v2.1.1\n    hooks:\n    -   id: conventional-pre-commit\n        stages: [commit-msg]\n        args: [] # optional: list of Conventional Commits types to allow e.g. [feat, fix, ci, chore, test]\n```\n\nThis link will give you the basics of the default setup:\n[config-conventional](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional).","src/posts/pre-commit.mdx","1d304dbf3b9ac4ba","pocketbase",{"id":75,"data":77,"body":82,"filePath":83,"digest":84,"deferredRender":22},{"title":78,"date":79,"description":80,"tags":81},"Getting Started with PocketBase and Vite+React+TypeScript",["Date","2024-09-01T00:00:00.000Z"],"A beginner's guide to setting up a full-stack application using PocketBase as a backend and Vite with React and TypeScript for the frontend.",[40,51],"## Why Pocketbase?\n\nPocketBase (PB) is an open-source backend solution providing\nreal-time database,\nauthentication,\nand file storage.\nIt is easy to deploy and you can build web and mobile applications\nwithout worrying much about backend.\n\nOur goal here is get everything installed and running.\nOnce we get the frontend and pocketbase running,\nwe will test the connection beween them.\nWe want it to be as simple as possible,\nso no todo app,\nno calculator,\nno nothing.\n\nI downloaded the `linux_amd64` version of PocketBase [here](https://github.com/pocketbase/pocketbase/releases/tag/v0.22.20).\nThen I extracted the binary to `~/.local/bin`.\nClose and open the terminal and type `pocketbase --version`,\nwhich should print something like:\n\n```plaintext\npocketbase version 0.22.20\n```\n\n## Why Vite + Typescript + React\n\nBecause if you get a job in frontend development in 2024,\nyou're going to need a bit of those three.\n\nOnce you get `npm` installed, kick-start a new project running:\n\n```bash\nnpm create vite@latest\n```\n\nI chose React and Typescript with SWC.\nI recommend you to choose which of these you prefer.\nThis will create a folder with the name of your project.\nI named my project `pocketbase-exploration`\n\n## Getting started with PocketBase\n\nOnce you have installed PB, navigate into `pocketbase-exploration` and start a server:\n\n```bash\npocketbase serve\n```\n\nThen open `http://127.0.0.1:8090/_/` on your browser.\nYou are going to be prompted to create an account.\n\nYou should see something like:\n\n![pocket base](/posts/pocketbase/pb.png)\n\nBeautiful.\n\n### Installing the SDK\n\nI insalled the sdk running the following command inside `pocketbase-exploration`:\n\n```bash\nnpm install pocketbase --save\n```\n\n### The frontend\n\nNow that we the SDK installed, we can run the frontend server:\n\n```bash\npnpm vite\n```\n\nYou should see the default vite page.\nAt this point, your `pocketbase-exploration/src` should look like:\n\n```plaintext\nsrc\n├── App.css\n├── App.tsx\n├── assets\n│   └── react.svg\n├── index.css\n├── main.tsx\n└── vite-env.d.ts\n```\n\nWe are going to edit the `App.tsx` file.\nHere are a bunch of functions that I thought you could use to manage authentication:\n\n```typescript\nimport { useCallback, useState, useMemo } from \"react\";\n\nimport PocketBase from \"pocketbase\";\n\nconst BASE_URL = \"http://127.0.0.1:8090\";\n\n// [...]\n\nconst pb = useMemo(() => new PocketBase(BASE_URL), []);\nconst [token, setToken] = useState(pb.authStore.token);\nconst [user, setUser] = useState(pb.authStore.model);\n\nconsole.log(token);\nconsole.log(user);\n\nconst logout = useCallback(() => {\n  pb.authStore.clear();\n}, []);\n\nconst login = useCallback(async (email, password) => {\n  return await pb.collection(\"users\").authWithPassword(email, password);\n}, []);\n\nconst doLogin = async (_) => login(\"\u003Cemail>\", \"\u003Cpassword>\");\n\ndoLogin().then((e) => console.log(e));\n\nif (!user) {\n  throw new Error(\"Not logged in\");\n}\n\n// [...]\n```\n\nGood luck!!!","src/posts/pocketbase.mdx","b168d440b2031418","quarto-ojs",{"id":85,"data":87,"body":94,"filePath":95,"digest":96,"deferredRender":22},{"title":88,"date":89,"description":90,"tags":91},"Jumpstart Your Data Visualization: Quarto & ObservableJS with R",["Date","2024-08-22T00:00:00.000Z"],"A step-by-step guide to creating plots using Quarto, ObservableJS, and R",[92,93],"writing","data","## Let's run the hello quarto\n\n### Getting quarto installed\n\nDownload it from the [download page](https://quarto.org/docs/get-started/).\n\nI download the ubuntu version and installed it with:f\n\n```bash\nsudo dpkg -i quarto-*.deb\n```\n\nCool.\n\nNow running `quarto --version` should print:\n\n```plaintext\n1.5.55\n```\n\n### Hello quarto\n\nCreate a file named `hello.qmd` with the content from this [gist](https://gist.github.com/gcgbarbosa/526c155c01489319b0ed4c9082e32268).\nThen render an html with quarto:\n\n```bash\nquarto render hello.qmd --to html\n```\n\nBeautiful. Now we can render html from qmd.\n\n![example test](/posts/observable/ggplot.png)\n\nWhile we are editing, we can also use the preview command:\n\n```bash\nquarto preview hello.qmd\n```\n\n## ObservableJS\n\nThe first step is to make the data available for ObservableJS.\nAfter that we use the `{ojs}` markup to define the plot.\n\n```quarto\n## Observable JS Data\n\n~~~{ojs}\n// transpose object\ndata = transpose(airquality)\n\n// output data\ndata\n\n// draw plot\nPlot.plot({\n  style: {\n    fontSize: 12\n  },\n  y: {\n    grid: true,\n    label: \"Ozone\"\n  },\n  x: {\n    label: \"Temperature\"\n  },\n  marks: [\n    Plot.dot(data, {x: \"Temp\", y: \"Ozone\"}),\n    Plot.linearRegressionY(data, {\n      y: \"Ozone\",\n      x:\"Temp\",\n      curve: \"catmull-rom\"\n    }),\n  ],\n  width: 640,\n  height: 400,\n  marginBottom: 40,\n  marginLeft: 40,\n  caption: \"Temperature and ozone level.\"\n})\n~~~\n\n~~~{r}\n// makes `airquality` available to ObservableJS\nojs_define(airquality)\n~~~\n\n```\n\n![observable result](/posts/observable/observable.png)\n\nBeautiful.","src/posts/quarto-ojs.mdx","3fe70d53f1d600ab","doom-syntax",{"id":97,"data":99,"body":105,"filePath":106,"digest":107,"deferredRender":22},{"title":100,"date":101,"description":102,"tags":103},"How to enable syntax highlighting and auto-completion for NS-3 in Doom Emacs?",["Date","2022-01-01T00:00:00.000Z"],"Article showing how to enable autocompletion if you're using NS-3",[104],"networks","If doom is your favorite editor and you want to work on ns-3 with doom then follow these steps:\n\n- Have doom emacs and ns-3 installed.\n- Make sure your `init.el` file has cc with lsp enabled:\n\n```plaintext\n(cc +lsp)\n```\n\n- You will need to generate a file called `compile_commands.json`.\n- Depending on your version of ns-3 you might use waf or cmake for that.\n- on cmake, add the following to your cmake compilation command:\n\n```plaintext\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...\n```\n\n- on waf, the document is automatically generated inside the `build` folder.\n- Move the `compile_commands.json` file to the root of your `ns3` folder.\n- Enjoy your autocompletion:\n\n\u003Cimg\n  src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660527250695/Tcd-TeaFQ.png\"\n  alt=\"2022-08-14-18:33:27.png\"\n  style=\"max-width:600px;\"\n/>\n\n- You can use `g d` to jump to the definition of an identifier.","src/posts/doom-syntax.mdx","9758d6979e71a4e1","nvim-nvchad",{"id":108,"data":110,"body":115,"filePath":116,"digest":117,"deferredRender":22},{"title":111,"date":112,"description":113,"tags":114},"Setting Up Neovim with NvChad",["Date","2024-08-02T00:00:00.000Z"],"Step-by-step instructions to install Neovim using the AppImage, configure NvChad, add essential plugins, customize keymaps, and enhance your development experience with Treesitter and Mason.",[40,92],"## Installing Neovim\n\nI like to go with the easiest, which is getting the `.appimage` from neovim's [https://github.com/neovim/neovim/releases/](https://github.com/neovim/neovim/releases/).\nGrab the latest and move it to `/usr/local/bin/neovim`.\n\n## Installing NvChad\n\nRun:\n\n```sh\ngit clone https://github.com/NvChad/starter ~/.config/nvim && nvim\n```\n\n## Adding plugins to NvChad\n\nNvChad uses `Lazy` to manage plugins.\n\nAdd the file `.config/nvim/lua/plugins/neogit.lua`.\n\nInside the file, add:\n\n```lua\nlocal plugins = {\n  {\n    lazy = false,\n    \"NeogitOrg/neogit\",\n    dependencies = {\n      \"nvim-lua/plenary.nvim\",         -- required\n      \"sindrets/diffview.nvim\",        -- optional - Diff integration\n\n      -- Only one of these is needed, not both.\n      \"nvim-telescope/telescope.nvim\", -- optional\n      -- \"ibhagwan/fzf-lua\",              -- optional\n    },\n    config = true\n  }\n}\n\nreturn plugins\n```\n\n## Changing keymaps\n\nEdit the `.config/nvim/lua/mappings.lua`:\n\nAs an example, I added `Neogit` to run with `SPC g g`.\n\n```lua\nmap(\"n\", \"\u003Cleader>gg\", \"\u003Ccmd> Neogit \u003Ccr>\")\n```\n\n### Default maps that you should know\n\n- `SPC f f`: Fuzzy find all files in the current directory\n\n## Treesitter\n\nThe goal of `nvim-treesitter` is to offer a straightforward and user-friendly interface for integrating `tree-sitter` into Neovim, along with basic functionalities such as syntax highlighting.\n\n### How to enable\n\nEdit `.conf/nvim/lua/plugins/init.vim` and enable:\n\n```lua\n-- [...]\n    {\n        \"nvim-treesitter/nvim-treesitter\",\n        opts = {\n            ensure_installed = {\n               \"vim\", \"lua\", \"vimdoc\", \"html\", \"css\", \"python\"\n            },\n        },\n    },\n--[...]\n```\n\n## Mason\n\nMason is a Neovim plugin that provides an integrated way\nto manage external dependencies\nlike LSP servers, linters, and formatters directly from Neovim.\n\n### Adding `python-lsp-server`\n\nAs an example we are going to install [https://github.com/python-lsp/python-lsp-server](python-lsp-server).\n\nEdit the file `.config/nvim/lua/configs/lspconfig.lua`.\nWe need to add `pylsp` to local servers:\n\n```lua\nlocal servers = { \"html\", \"cssls\", \"pylsp\" }\n```\n\nLets also add an example configuration. Append the\n\n```lua\nlspconfig.pylsp.setup {\n  settings = {\n    pylsp = {\n      plugins = {\n        pycodestyle = {\n          maxLineLength = 125,\n        }\n      }\n    }\n  }\n}\n```\n\nWe are setting the maximum line length to 125.\n\nThat's it.\nYou just got started with `nvim` and `NvChad`.","src/posts/nvim-nvchad.mdx","e7ab269d63cda35a","sqlalchemy",{"id":118,"data":120,"body":125,"filePath":126,"digest":127,"deferredRender":22},{"title":121,"date":122,"description":123,"tags":124},"Working with SQLAlchemy 2.0: A lightning fast guide",["Date","2024-10-02T00:00:00.000Z"],"A step-by-step guide to migrating to SQLAlchemy version 2.0, covering installation, data modeling, and CRUD operations using SQLite.",[51],"SQLAlchemy 2.0 was launched in 2023, but ChatGPT keeps throwing garbage at me :(\nI just can't get it to generate something that compiles.\nI've been defering migration for a while, but the time has come.\n\nIn this tutorial I want to show the basics of SQLAlchemy v2.\nI am not going to care about the v1 at all.\n\n## Installation\n\n```bash\npip install sqlalchemy\n```\n\nDone.\n\n## Things to learn\n\nWe want to cover enough for at least a CRUD.\nCRUD is an acronym for Create, Read, Update, and Delete.\nThis sounds fair, right?\nWe are also using SQLite for obvious reasons.\n\nFirst things first, let's import the necessary modules and create an engine.\n\n```python\nimport sqlalchemy as db\nengine = db.create_engine(\"sqlite:///./test.db\" , echo=True)\n```\n\nThink of the engine in SQLAlchemy as the powerful engine of a car.\nIn the world of databases,\nit's what makes everything move smoothly behind the scenes.\n\n### Data model\n\nLet's define a simple data model.\n\n```python\nfrom sqlalchemy.orm import DeclarativeBase, Session, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(256))\n    email: Mapped[str] = mapped_column(db.String(256))\n```\n\n#### Creating an user\n\nVery straight forward.\n\n```python\nuser = User(name=\"John Doe\", email=\"doe@doe.com\")\nwith Session(engine) as session:\n    session.add(user)\n    session.commit()\n```\n\n#### Deleting an user\n\nEasy peasy.\n\n```python\nwith Session(engine) as session:\n    user = session.get(User, user_id)\n    session.delete(user)\n    session.commit()\n```\n\n#### Edit user\n\nIf we make mistakes :)\n\n```python\nwith Session(self.engine) as session:\n    user = session.get(User, user_id)\n    user.name = \"Jhonzito\"\n    session.commit()\n```\n\n#### List all users\n\nIt ain't a CRUD without listing all.\n\n```python\nresult: list[User] = []\nwith Session(self.engine) as session:\n    users = db.select(User)\n    for user in session.scalars(users):\n        result.append(user)\n```\n\n## Notes\n\nThanks everyone for the support.\nThis blog was supposed to be just a place that\nI can go back to if I need a refresh or snippet.\nYou've made it great :)","src/posts/sqlalchemy.mdx","b0f027451470413c","structurzr",{"id":128,"data":130,"body":136,"filePath":137,"digest":138,"deferredRender":22},{"title":131,"date":132,"description":133,"tags":134},"Setting Up Structurizr for Local Authoring: A Step-by-Step Guide",["Date","2024-08-16T00:00:00.000Z"],"Learn how to set up Structurizr for local authoring, including creating DSL files, running Structurizr Lite with Docker, and installing the Structurizr CLI. Follow this comprehensive guide to streamline your software architecture documentation workflow.",[40,135],"documentation","## Workflow\n\nStructurizr has a [workflow](https://docs.structurizr.com/lite/workflow)\nsuggestion.\nWe are going to follow the `local authoring` step by step.\n\n### Creating the dsl file\n\nCreate a folder named `strzr` and inside it add a file named `strzr.dsl`.\n\nAdd the example file:\n\n```plaintext\nworkspace {\n    model {\n        u = person \"User\"\n        ss = softwareSystem \"Software System\"\n\n        u -> ss \"Uses\"\n    }\n    views {\n        systemContext ss {\n            include *\n            autolayout lr\n        }\n    }\n}\n```\n\n### Getting Structurizr Lite running\n\nPull the image:\n\n```bash\ndocker pull structurizr/lite\n```\n\nRun a container from the image:\n\n```bash\ndocker run -it --rm -p 8080:8080 -v `pwd`:/usr/local/structurizr structurizr/lite\n```\n\nThen open \u003Chttp://localhost:8080/workspace/diagrams>\n\nYou should see this:\n\n![structurizr](/posts/structurizr/structurizr.png)\n\nVoila.\n\n## How to install the CLI\n\nI like CLI's and I thought it would be nice to have it working.\nBut I don't like compiling things from source.\nI'd rather get them compiled if I can.\n\nDownload the `structurizr-cli.zip` from\n\u003Chttps://github.com/structurizr/cli/releases>.\n\nExtract the zip and move it to `/opt/structurizr`.Then add it to your `rc` file.\nI added this to my `.zshrc`:\n\n```bash\n# add structurizr\nexport PATH=\"/opt/structurizr:$PATH\"\n```\n\nAfter reloading your session\n(by for example closing and re-opening the terminal),\nyou can call `which structurizr` and it should print:\n\n```plaintext\n/opt/structurizr/structurizr\n```","src/posts/structurzr.mdx","49fb67f673f1f6c4","taking-notes",{"id":139,"data":141,"body":147,"filePath":148,"digest":149,"deferredRender":22},{"title":142,"date":143,"description":144,"tags":145},"Taking notes & good science",["Date","2023-01-01T00:00:00.000Z"],"Life get's hard when you forget... and forgetting is done constantly",[92,146],"science","You can't have good science without taking notes unless you remember what you had for lunch 58 days ago. Science is about forming consensus and being able to replicate experiments. How can you repeat what you don't remember? Have I convinced you? No? Then leave. Don't read the rest. Have you convinced yourself now? I hope so... grrrrrrrrr\n\nGoogling brings up some good things about note-taking in general:\n\n1. Cornell Method: Divide your notepaper into a main notetaking area, a cue column, and a summary section. It is a valuable technique for organizing information and reviewing notes later.\n\n2. Mapping: This visual way of note-taking involves creating a diagram or mind map of related concepts and ideas. It is helpful for brainstorming, problem-solving, and understanding complex relationships.\n\n3. Charting: Charting involves creating tables, graphs, or charts to organize and summarize information. It helps compare and contrast concepts, data analysis, and identify patterns.\n\n4. Outlining: Outlining involves creating an organized information hierarchy using headings and subheadings. It helps summarize and synthesize information and identify the main points of a text.\n\n5. Sketchnoting: Sketchnoting involves combining images, icons, and text to capture information. It is helpful for creative thinking, engagement, and making connections between ideas.\n\n6. Getting Things Done (GTD) is a productivity method that involves capturing all your tasks, organizing them, and prioritizing what's important. It helps reduce stress and increase productivity by keeping a clear mind.\n\n7. Zettelkasten: This notetaking system involves creating small notes containing individual ideas or concepts and linking them together using a unique identifier, allowing for complex ideas to be built and connected over time.\n\nThe last two items are systems for notetaking. If something has at least two approaches, we can call it hard; you must agree, no?\n\n## As a beginner, how do I approach notetaking?\n\nStart writing on a scratchpad. A scratchpad is like a piece of paper where you can write things down. Registering on it lets you organize your ideas, make plans, choose what is most important, and remember things you want to remember. For example, write down things you hear in a class or a meeting, when you want to think up new ideas, or when you have a problem to solve. You can also use it to draw pictures or write whichever way you like, and you don't have to be perfect. This process helps you to be more creative and make more things, and later you can use what you wrote as a reminder of what you learned or want to do. The first five methods of the list above can be mixed for this goal. There's no wrong way. The cue phrase is \"brain dump\".\n\nThis is me:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1680289119540/da03082b-03aa-4c21-b5fc-3d44680ef81f.jpeg)\n\n## I have hundreds of pieces of paper everywhere from scratchpad. What do I do with them?\n\nThis is the moment notetaking systems take over. I recommend reading \"How to Take Smart Notes\" from Sönke Ahrens. I don't know how to motivate you to read that book. I will say that Niklas Luhmann, who pioneered this method, authored over **70 books** and **close to 400 scholarly articles** on diverse topics such as law, economy, politics, art, religion, ecology, mass media, and love. How can I person write 70 books in one life? When asked this question, Niklas would point to the old file full of card notes. Thank god we have digital notetaking.\n\n## Which software should I use to manage my notes?\n\nWell well well... The list is long:\n\n1. Roam Research\n2. Obsidian\n3. Zettlr\n4. The Archive\n5. Foam\n6. Notejoy\n7. TiddlyWiki\n8. nvALT\n9. Simplenote\n10. Evernote\n11. Standard Notes\n12. Keep It\n13. DEVONthink\n14. ConnectedText\n15. Luhmann's Zettelkasten\n16. Notion\n17. Citationsy\n18. Zettel\n19. Joplin\n20. Trilium Notes\n\nI hope I have answered your question... Good luck with the information overload :)\n\nIf you want my opinion, go with **Obsidian**. It is free for personal use. I use emacs and org-mode, but I am utterly insane beyond insanity. So you don't want to come down here.\n\nThis is **emacs**:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1680289076155/d2fa8a38-3545-459b-b03a-7e0f1c636d1c.jpeg)\n\n## How can this help my science in practical terms?\n\nSimply put, this will help you by preventing overload.\n\n1. **Information Overload**: Scientists are constantly flooded with new data, research papers, and scientific studies that are sometimes difficult to process, analyze and identify legitimate findings. Information overload can lead to a misinterpretation of data, incorrect conclusions, and wasted resources.\n\n2. **Choice Overload**: Sometimes, scientists have to choose between different options or methods to conduct their research. Too many choices can lead to indecision, wasted time, and missed opportunities. Also, when researchers are overwhelmed by the number of options available, they tend to default to the most familiar method, which can result in a lack of innovation.\n\n3. **Collaborative Overload**: Scientific research requires collaboration between multiple scientists, universities, and institutions. However, collaborative overload can result in redundancy, repeating experiments in a different agency, lowered efficiencies, and stalled science.\n\n4. **Technological Overload**: With technological advancements, scientific research is becoming more data-driven than ever. However, the flood of data has resulted in a technological overload, leading to tools and software development, sometimes of questionable value.\n\nBe a good scientist. **Take notes**. Make your work auditable and replicable at least a bit because the world is brutal, my fellow researcher. Scary place. Wonderful but scary.","src/posts/taking-notes.mdx","2023700f11f5c2d5","tykz",{"id":150,"data":152,"body":157,"filePath":158,"digest":159,"deferredRender":22},{"title":153,"date":154,"description":155,"tags":156},"Transforming Images with TikZ in LaTeX",["Date","2023-03-28T00:00:00.000Z"],"Learn how to convert simple images into professional-quality graphics using the TikZ package in LaTeX. This guide covers the basics of TikZ, provides step-by-step instructions, and includes practical examples to enhance your scientific documents.",[92],"The two images below have the same information. How do you go from this:\n\n![before](https://cdn.hashnode.com/res/hashnode/image/upload/v1675048854707/26a0ee9b-356c-4983-9cf0-d850598bfd4c.png)\n\nTo this?\n\n![after](https://cdn.hashnode.com/res/hashnode/image/upload/v1675048838279/12ca21c4-5849-41d1-8a89-6e38ce2f69e4.png)\n\nUsing tikz :)\n\n---\n\n### What is TikZ?\n\nTykZ is a LaTeX package used for creating professional-looking graphics in scientific documents. LaTeX is a typesetting language used for producing high-quality technical and scientific documents, and TykZ provides additional tools and features for producing graphics in these types of documents.\n\nThe TykZ package offers a variety of tools for creating graphics, including the ability to create 3D graphics, plot data, and produce animations. It also provides several pre-made templates for common types of graphics, making it easier to produce professional-looking results quickly.\n\nThe TykZ package is particularly well-suited for use in scientific documents, as it provides features for creating graphics that are specifically designed to meet the needs of this type of content. For example, it includes tools for creating 3D graphics that can be used to visualize scientific data, and it provides options for labeling axes and including legends.\n\nOverall, the TikZ package is a valuable tool for scientists and technical writers who need to produce high-quality graphics in their documents. It offers a range of features that make it easier to create professional-looking results, even for those with limited experience in creating graphics.\n\n### How to use TikZ?\n\nTikZ is a package inside Latex. To use TikZ, you will need a machine with Latex installed and working.\n\nOne solution to get Latex working faster is Overleaf. Overleaf is a collaborative, cloud-based LaTeX editor and project management tool for creating, editing, and publishing scientific and academic documents.\n\nIf you want to learn TykZ, overleaf has a great 5 part tutorial: [learn tykz](\u003Chttps://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ%3A_A_Tutorial_for_Beginners_(Part_1)%E2%80%94Basic_Drawing>).\n\nYou can use the following latex template to get started with TykZ.\n\n```latex\n\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage[margin=1in]{geometry}\n\n\\title{\n  My beautiful square\n}\n\n\\author{George C. G. Barbosa}\n\\date{\\today}\n\n\\usepackage{tikz}\n\\usetikzlibrary{\n  shapes,\n  arrows,\n  arrows.meta,\n  shapes.geometric,\n  calc,\n  positioning,\n  backgrounds,\n  decorations.pathreplacing,\n  matrix,\n  math\n}\n\n\\begin{document}\n\n\\maketitle\n\n\\begin{figure}[h]\n  \\centering\n  \\resizebox{\\columnwidth}{!}{\n    \\begin{tikzpicture}[]\n      \\draw (0,0) -- (4,0) -- (4,4) -- (0,4) -- (0,0);\n    \\end{tikzpicture}\n  }\n\\caption{\\footnotesize{El squaro}}\\label{fig:tikz}\n\\end{figure}\n\n\\end{document}\n```\n\nThe above source code will draw a square of 4x4 units.","src/posts/tykz.mdx","b5d08a9a185f71dd","typst",{"id":160,"data":162,"body":167,"filePath":168,"digest":169,"deferredRender":22},{"title":163,"date":164,"description":165,"tags":166},"The bare minimum to get started with Typst",["Date","2024-07-27T00:00:00.000Z"],"How to write using Typst",[92],"Typst is a new markup-based typesetting system for the sciences\nIt was designed to be the middle ground between `Latex` and `Microsoft Word`.\n\n## Installation\n\nThe best way to install is using cargo:\n\n```sh\ncargo install --locked typst-cli\n```\n\nYou can learn how to install `cargo` [here](https://doc.rust-lang.org/cargo/getting-started/installation.html).\n\n## Writing your first document\n\nThis code:\n\n```typst\n# hello_world.typ\n= Hello World\nThis is a\nhello world.\n```\n\nAfter running:\n\n```sh\ntypst compile hello_world.typ\n```\n\nShould render `hello_world.pdf`:\n\n![hello world typst](/posts/typst/hello_world.png)\n\n## Where do I go from here?\n\nTheir github page is [here](https://github.com/typst/typst).\nGood luck :)","src/posts/typst.mdx","d28e5c0f53370d4f","reveal-js",{"id":170,"data":172,"body":177,"filePath":178,"digest":179,"deferredRender":22},{"title":173,"date":174,"description":175,"tags":176},"Reveal.js super quick",["Date","2022-06-10T00:00:00.000Z"],"Text-based presentation tools can reduce hours spent & improve reusability.",[92],"Using visual tools for quick presentations is overkill, in my opinion.\nIf you give different presentations weekly, please try a text-based tool;\nI promise you won't regret it.\nThere are many options.\nIn this short post, I will discuss Reveal.js because it is part of my toolchain.\n\nReveal.js is an open-source JavaScript library for creating presentations using HTML,\nCSS, and JavaScript.\nIt is designed to allow customizable and interactive presentations to be viewed in a web browser without additional software.\nReveal.js supports many features, including slides with different layouts, embedded media, animation,\nspeaker notes, and more.\nIt is used by **educators**, **developers**, designers, and others who need to create presentations for various purposes,\nsuch as teaching, showcasing their work, or delivering speeches.\n\n## Super quickstart\n\nMost tutorials will tell you to clone reveal.js and go from there. Don't do that. That is insane. Use **Pandoc** instead.\n\n### What is pandoc\n\nPandoc is an open-source command line tool for converting documents between various formats.\nIt supports conversion between over 20 different document processing languages, including LaTeX, Markdown, HTML, PDF, and many other popular file types.\nWith Pandoc, you can convert files between formats quickly and easily.\nPandoc simplifies cross-platform document creation and publishing by allowing users to write in plain text\nmarkup syntax while providing access to features typically reserved for more advanced tools.\nGood luck: [https://pandoc.org/installing.html](https://pandoc.org/installing.html)\n\n### Markdown Template\n\nI am glad you've managed to get Pandoc installed.\nNow, here's a template to make things simpler.\nPlease save it as `slides.md` so that the following command works out of the box.\n\n```markdown\n---\ntitle: Your Title Here\nsubtitle: Your Subtitle Here\nauthor: Your Name Here\ndate: Date Here\noutput:\n  revealjs::revealjs_presentation:\n    theme: night\n---\n\n# Introduction\n\n- Introduction slide 1\n- Introduction slide 2\n\n---\n\n# Conclusion\n\n- Conclusion slide 1\n- Conclusion slide 2\n```\n\n### Using Pandoc to convert from Markdown to Reveal.js\n\nRun the command below to get the `index.html` with your presentation.\n\n```bash\npandoc -t revealjs -s -o index.html slides.md -V revealjs-url=https://unpkg.com/reveal.js/\n```","src/posts/reveal-js.mdx","818a2aec4272f478","vllm",{"id":180,"data":182,"body":187,"filePath":188,"digest":189,"deferredRender":22},{"title":183,"date":184,"description":185,"tags":186},"Setting Up vLLM with Hugging Face for Generative AI Projects",["Date","2024-08-03T00:00:00.000Z"],"A comprehensive guide to installing vLLM, integrating it with Hugging Face, and deploying a generative AI server. Learn how to test your setup and leverage LiteLLM for enhanced functionality.",[18],"## Installing\n\nJust run:\n\n```bash\ngit clone https://github.com/vllm-project/vllm.git\ncd vllm\ndocker build -f Dockerfile.cpu -t vllm-cpu-env --shm-size=4g .\n```\n\nOnce you get it installed, you can login to Hugging Face:\n\n```bash\nhuggingface-cli login\n```\n\nYou will pull the models from Hugging Face, so you need to be logged in.\n\n## Start vLLM server\n\nRun:\n\n```bash\ndocker run -it \\\n     -v ~/.cache/huggingface:/root/.cache/huggingface \\\n     --rm \\\n     --network=host \\\n     vllm-cpu-env \\\n     --model facebook/opt-125m \\\n     --api-key 1234banana\n```\n\nThis will install Llama-3-Groq-8B-Tool-Use model and start the server.\n\n## Testing\n\nYou can curl the server to test it:\n\n```bash\ncurl http://localhost:8000/v1/completions \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"model\": \"facebook/opt-125m\",\n        \"prompt\": \"Dario Meira seria muito\",\n        \"max_tokens\": 50,\n        \"temperature\": 0,\n        \"api_key\": \"1234banana\"\n    }'\n```\n\n## Bonus: using LiteLLM to consume vLLM\n\n```bash\nbase_url = \"http://localhost:8000/v1\"\nmodel_name = \"facebook/opt-125m\"\napi_key = \"s3cr3t\"\n\n# vLLM uses the OpenAI API, so we need to set the provider to \"openai\"\nPROVIDER = \"openai\"\n\ncompletion(\n    model=f\"{PROVIDER}/{model_name}\",\n    api_key=api_key,\n    base_url=base_url,\n    messages=messages,\n)\n```\n\nVoila! You have vLLM running on your machine.","src/posts/vllm.mdx","3590dacafbf9659c","weaviate",{"id":190,"data":192,"body":198,"filePath":199,"digest":200,"deferredRender":22},{"title":193,"date":194,"description":195,"tags":196},"Getting Started with Weaviate",["Date","2024-09-18T00:00:00.000Z"],"Learn how to set up Weaviate, perform basic operations, and leverage hybrid queries for efficient vector and text-based searches.",[18,197],"search","## How to use weaviate\n\nWeaviate is a vector DB usually used for Retrieval Augmented Generation.\nI like it because they provide hybrid queries.\nYou can use both dense and sparse verctor search.\nMy goal is walk you trough the basics of Weaviate.\n\n### Starting a weaviate instance\n\nLet's get an instance of Weaviate running with docker:\n\n```bash\ndocker run -p 8080:8080 -p 50051:50051 cr.weaviate.io/semitechnologies/weaviate:1.26.3\n```\n\n### The python SDK\n\nTo interact with Weaviate, we'll use the Python SDK. Install it with:\n\n```bash\npip install -U weaviate-client  # For beta versions: `pip install --pre -U \"weaviate-client==4.*\"`\n```\n\nCreate a `weaviate.py` file and add the following:\n\n```python\nimport weaviate\nclient = weaviate.connect_to_local()\n```\n\n### Basic Operations\n\n#### Creating a collection\n\nTo create a new collection in Weaviate:\n\n```python\nclient.collections.create(\"\u003Ccollection_name>\")\n```\n\n#### Adding data\n\nInsert data into your collection:\n\n```python\ncollection = client.collections.get(\"\u003Ccollection_name>\")\ncollection.data.insert({\"property\": \"text\"}, vector: list[float=vector)\n```\n\nWhere `vector` should be a `list[float]`.\n\n#### Search\n\nWeaviate allows dense, sparse and hybrid search.\n\n##### Vector\n\nPerform a vector-based search:\n\n```python\ncollection = client.collections.get(\"\u003Ccollection_name>\")\ncollection.query.near_vector(vector, limit=10)\n```\n\n##### Full-text\n\nExecute a text-based search using BM25:\n\n```python\ncollection = client.collections.get(\"\u003Ccollection_name>\")\nresponse = collection.query.bm25(\"\u003Cquery>\", limit=10)\n```\n\n##### Hybrid\n\nCombine vector and text-based search for optimal results:\n\n```python\ncollection = client.collections.get(\"\u003Ccollection_name>\")\nresponse = collection.query.hybrid(\n    query=\"\u003Cquery>\",\n    vector=vector,\n    limit=10,\n)\n```","src/posts/weaviate.mdx","385a207264713195"]